import { AnyOptionsSchema, InferredSchema } from "./options";
import { Creation, ContextWithOptions } from "./shared";
import { PromiseOrSync } from "./utils";
export interface BlockDefinition<BlockOptionsSchema extends AnyOptionsSchema> {
    options: BlockOptionsSchema;
    produce: BlockProducer<BlockOptionsSchema>;
}
export type BlockProducer<BlockOptionsSchema extends AnyOptionsSchema> = (context: ContextWithOptions<BlockOptionsSchema>) => PromiseOrSync<Creation>;
export interface Block<BlockOptionsSchema extends AnyOptionsSchema> extends BlockProducer<BlockOptionsSchema> {
    createAddon: <AddonOptionsSchema extends AnyOptionsSchema>(addonDefinition: AddonDefinition<AddonOptionsSchema, BlockOptionsSchema>) => Addon<AddonOptionsSchema, BlockOptionsSchema>;
}
export type Addon<AddonOptionsSchema extends AnyOptionsSchema, BlockOptionsSchema extends AnyOptionsSchema> = (context: ContextWithOptions<AddonOptionsSchema>) => PromiseOrSync<InferredSchema<BlockOptionsSchema>>;
export interface AddonDefinition<AddonOptionsSchema extends AnyOptionsSchema, BlockOptionsSchema extends AnyOptionsSchema> {
    options: AddonOptionsSchema;
    produce: AddonProducer<AddonOptionsSchema, BlockOptionsSchema>;
}
export type AddonProducer<AddonOptionsSchema extends AnyOptionsSchema, BlockOptionsSchema extends AnyOptionsSchema> = (context: ContextWithOptions<AddonOptionsSchema>) => PromiseOrSync<InferredSchema<BlockOptionsSchema>>;
export declare function createBlock<BlockOptionsSchema extends AnyOptionsSchema>(blockDefinition: BlockDefinition<BlockOptionsSchema>): Block<BlockOptionsSchema>;
