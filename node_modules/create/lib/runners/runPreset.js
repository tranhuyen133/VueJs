import { mergeCreations } from "../mergers/mergeCreations";
import { runCreation } from "./runCreation";
export async function runPreset(preset, options, context) {
    // From docs/running/about.md ...
    // 2. Run blocks in order with their portions of the context
    const starting = await preset({ ...context, options });
    const startingCreation = mergeCreations(starting.map(removeFunctionValues));
    // 3. Run delayed portions of blocks that required metadata, in order
    const creations = starting.map((firstRound) => firstRoundToCreation(firstRound, startingCreation));
    const creation = mergeCreations(creations);
    // 4. Run all stored file, network, and shell operations
    await runCreation(creation, context);
}
function removeFunctionValues(firstRound) {
    return Object.fromEntries(Object.entries(firstRound).filter(([, value]) => typeof value !== "function"));
}
function firstRoundToCreation(firstRound, firstRoundsCreation) {
    return Object.fromEntries(Object.entries(firstRound).map(([key, value]) => [
        key,
        typeof value === "function" ? value(firstRoundsCreation) : value,
    ]));
}
//# sourceMappingURL=runPreset.js.map